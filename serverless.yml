service: serverless-crud

provider:
  name: aws
  runtime: python3.10
  iam:
    role:
      statements:
        - Effect: Allow
          Action: dynamodb:*
          Resource: !GetAtt usersTable.Arn

plugins:
  - serverless-dynamodb
  - serverless-offline # must be loaded after

custom:
  table-name: users-table-${sls:stage}
  # dynamodb local
  serverless-dynamodb:
    stages:
      - dev
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true

package:
  individually: true
  patterns:
    - '!./**' # exclude everything by default
    - utils/* # include utils module

functions:
  get-users:
    handler: get_users/get_users.handler
    environment:
      TABLE_NAME: ${self:custom.table-name}
    package:
      patterns:
        - "get_users/*.py"
    events:
      - http:
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true

  create-users:
    handler: create_users/create_users.handler
    environment:
      TABLE_NAME: ${self:custom.table-name}
    package: 
      patterns:
        - "create_users/*.py"
    events:
      - http:
          path: users
          method: POST
          request:
            schemas:
              application/json: ${file(./schemas/user-schema.json)}

  update-users:
    handler: update_users/update_users.handler
    environment:
      TABLE_NAME: ${self:custom.table-name}
    package:
      patterns:
        - "update_users/*.py"
    events:
      - http:
          path: users/{id}
          method: PATCH
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(./schemas/user-schema.json)}
  
  delete-users:
    handler: delete_users/delete_users.handler
    environment:
      TABLE_NAME: ${self:custom.table-name}
    package:
      patterns:
        - "delete_users/*.py"
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        TableName: ${self:custom.table-name}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        
    s3Bucket:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: ${self:service}-${sls:stage}-static-content-bucket
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false

    s3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref s3Bucket
        PolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Action: 
                - "s3:getObject"
              Effect: Allow
              Resource: !Join 
              - "/"
              - - !GetAtt s3Bucket.Arn
                - "*"
              Principal: "*"
