service: serverless-crud

provider:
  name: aws
  runtime: python3.10
  iam:
    role:
      # default permissions
      statements:
        - Effect: Allow
          Action: 
            - dynamodb:Query
            - dynamodb:putItem
            - dynamodb:updateItem
            - dynamodb:deleteItem
          Resource: !GetAtt usersTable.Arn

plugins:
  - serverless-iam-roles-per-function
  - serverless-dynamodb
  - serverless-offline
  - serverless-apigateway-service-proxy
  - serverless-lift

custom:
  table-name: users-table-${sls:stage}
  like-queue-name: like-queue-${sls:stage}
  apiGatewayServiceProxies:
    - sqs:
        path: /like-user
        method: post
        queueName: ${self:custom.like-queue-name}
        authorizationType: COGNITO_USER_POOLS
        authorizerId: !Ref apiAuthorizer
        cors: true
        response:
          template:
            success: |-
              { "message": "accepted" }
            clientError: |-
              { "message": "there is an error in your request" }
            serverError: |-
              { "message": "there was an error handling your request"}
  # dynamodb local
  serverless-dynamodb:
    stages:
      - dev
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true

package:
  individually: true
  patterns:
    - "!./**" # exclude everything by default
    - utils/* # include utils module

layers:
  image-processing:
    description: "Image processing dependencies"
    package: 
      artifact: .Python/image_processing.zip

constructs:
  like-queue:
    type: queue
    worker:
      handler: like_user/like_user.handler
      environment:
        TABLE_NAME: ${self:custom.table-name}
      reservedConcurrency: 1
      package:
        patterns:
          - like_user/like_user.py
    extensions:
      queue:
        Properties:
          QueueName: ${self:custom.like-queue-name}

functions:
  get-users:
    handler: get_users/get_users.handler
    environment:
      TABLE_NAME: ${self:custom.table-name}
    package:
      patterns:
        - "get_users/*.py"
    events:
      - http:
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true

  create-users:
    handler: create_users/create_users.handler
    environment:
      TABLE_NAME: ${self:custom.table-name}
    package: 
      patterns:
        - "create_users/*.py"
    events:
      - http:
          path: users
          method: POST
          request:
            schemas:
              application/json: ${file(./schemas/user-schema.json)}

  update-users:
    handler: update_users/update_users.handler
    environment:
      TABLE_NAME: ${self:custom.table-name}
    package:
      patterns:
        - "update_users/*.py"
    events:
      - http:
          path: users/{id}
          method: PATCH
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: !Ref apiAuthorizer
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(./schemas/user-schema.json)}
  
  delete-users:
    handler: delete_users/delete_users.handler
    environment:
      TABLE_NAME: ${self:custom.table-name}
    package:
      patterns:
        - "delete_users/*.py"
    events:
      - http:
          path: users/{id}
          method: DELETE
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: !Ref apiAuthorizer
          request:
            parameters:
              paths:
                id: true
  
  get-signed-url:
    handler: get_signed_url/get_signed_url.handler
    # override permissions
    iamRoleStatements:
      - Effect: Allow
        Action: s3:putObject
        Resource: !Join 
          - "/"
          - - !GetAtt s3Bucket.Arn
            - "*"
    environment:
      BUCKET: !Ref s3Bucket
    package:
      patterns:
        - get_signed_url/get_signed_url.py
        - "!utils/*" # exclude utils module
    events:
      - http:
          path: signed-url
          method: GET
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: !Ref apiAuthorizer
          request:
            parameters:
              querystrings:
                filename: true
    
  thumbnail:
    handler: thumbnail/thumbnail.handler
    layers:
      - !Ref ImageDashprocessingLambdaLayer
    # override permissions
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:getObject
        Resource: !Join 
          - "/"
          - - !GetAtt s3Bucket.Arn
            - upload/*
      - Effect: Allow
        Action:
          - s3:putObject
        Resource: !Join 
          - "/"
          - - !GetAtt s3Bucket.Arn
            - resized/*
    package:
      patterns:
        - thumbnail/thumbnail.py
        - "!utils/*"
    events:
      - s3:
          bucket: !Ref s3Bucket
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/
  
  # Authorization functions
  register:
    handler: authorization/register.py
    package:
      patterns:
        - authorization/register.py
    environment:
      CLIENT_ID: !Ref appClient
      USER_POOL_ID: !GetAtt  userPool.UserPoolId
    events:
      - http:
          path: /register
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/authorization-schema.json)}
    
    sign-in:
      handler: authorization/sign_in.handler
      package:
        patterns:
          - authorization/sign_in.py
      environment:
        CLIENT_ID: !Ref appClient
      events:
        - http:
          path: /token
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/authorization-schema.json)}

    refresh-token:
      handler: authorization/refresh_token.handler
      package:
        patterns:
          - authorization/refresh_token.py
      environment:
        CLIENT_ID: !Ref appClient
      events:
        - http:
          path: /token/refresh
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/refresh-token-schema.json)}

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        TableName: ${self:custom.table-name}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        
    s3Bucket:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: ${self:service}-${sls:stage}-static-content-bucket
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false

    s3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref s3Bucket
        PolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Action: 
                - "s3:getObject"
              Effect: Allow
              Resource: !Join 
              - "/"
              - - !GetAtt s3Bucket.Arn
                - "*"
              Principal: "*"

    userPool:
      Type: AWS::Cognito::UserPool
    
    appClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !GetAtt userPool.UserPoolId

    apiAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-api-authorizer
        RestApiId: !Ref ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - !GetAtt userPool.Arn
